[{"/Users/mattbrown/projects/slice/src/index.js":"1","/Users/mattbrown/projects/slice/src/App.js":"2","/Users/mattbrown/projects/slice/src/components/Details/styles.js":"3","/Users/mattbrown/projects/slice/src/components/Details/Details.js":"4","/Users/mattbrown/projects/slice/src/components/Main/Main.js":"5","/Users/mattbrown/projects/slice/src/components/Main/Form/Form.js":"6","/Users/mattbrown/projects/slice/src/components/Main/List/styles.js":"7","/Users/mattbrown/projects/slice/src/components/Main/List/List.js":"8","/Users/mattbrown/projects/slice/src/context/context.js":"9","/Users/mattbrown/projects/slice/src/context/contextReducer.js":"10","/Users/mattbrown/projects/slice/src/components/Main/styles.js":"11","/Users/mattbrown/projects/slice/src/useTransactions.js":"12","/Users/mattbrown/projects/slice/src/utils/formatDate.js":"13","/Users/mattbrown/projects/slice/src/components/SnackBar/SnackBar.js":"14","/Users/mattbrown/projects/slice/src/components/infoCard.js":"15","/Users/mattbrown/projects/slice/src/components/Main/Form/styles.js":"16","/Users/mattbrown/projects/slice/src/styles.js":"17"},{"size":423,"mtime":1608743194915,"results":"18","hashOfConfig":"19"},{"size":1548,"mtime":1608752538876,"results":"20","hashOfConfig":"19"},{"size":224,"mtime":1608655473729,"results":"21","hashOfConfig":"19"},{"size":685,"mtime":1608739116615,"results":"22","hashOfConfig":"19"},{"size":1128,"mtime":1608751986340,"results":"23","hashOfConfig":"19"},{"size":5044,"mtime":1608749913457,"results":"24","hashOfConfig":"19"},{"size":399,"mtime":1608659775419,"results":"25","hashOfConfig":"19"},{"size":1655,"mtime":1608737066315,"results":"26","hashOfConfig":"19"},{"size":921,"mtime":1608746239389,"results":"27","hashOfConfig":"19"},{"size":540,"mtime":1608745751444,"results":"28","hashOfConfig":"19"},{"size":490,"mtime":1608656291287,"results":"29","hashOfConfig":"19"},{"size":1338,"mtime":1608745574652,"results":"30","hashOfConfig":"19"},{"size":332,"mtime":1608737720162,"results":"31","hashOfConfig":"19"},{"size":834,"mtime":1608750062466,"results":"32","hashOfConfig":"19"},{"size":408,"mtime":1608752686672,"results":"33","hashOfConfig":"19"},{"size":235,"mtime":1608658164193,"results":"34","hashOfConfig":"19"},{"size":552,"mtime":1608752647079,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xcy3cd",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mattbrown/projects/slice/src/index.js",[],"/Users/mattbrown/projects/slice/src/App.js",[],"/Users/mattbrown/projects/slice/src/components/Details/styles.js",[],["73","74"],"/Users/mattbrown/projects/slice/src/components/Details/Details.js",[],"/Users/mattbrown/projects/slice/src/components/Main/Main.js",[],"/Users/mattbrown/projects/slice/src/components/Main/Form/Form.js",["75","76"],"import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  TextField,\n  Typography,\n  Grid,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSpeechContext } from \"@speechly/react-client\";\nimport { ExpenseTrackerContext } from \"../../../context/context\";\nimport useStyles from \"./styles\";\nimport { FormatIndentDecrease } from \"@material-ui/icons\";\nimport CustomSnackbar from \"../../SnackBar/SnackBar\";\nimport {\n  incomeCategories,\n  expenseCategories,\n} from \"../../../constants/categories\";\n\nimport formatDate from \"../../../utils/formatDate\";\n\nconst initialState = {\n  amount: \"\",\n  category: \"\",\n  type: \"Income\",\n  date: formatDate(new Date()),\n};\nconst Form = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { addTransaction } = useContext(ExpenseTrackerContext);\n  const { segment } = useSpeechContext();\n  const [open, setOpen] = useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes(\"-\"))\n      return;\n    const transaction = {\n      ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4(),\n    };\n    setOpen(true);\n    addTransaction(transaction);\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === \"add_expense\") {\n        setFormData({ ...formData, type: \"Expense\" });\n      } else if (segment.intent.intent === \"add_income\") {\n        setFormData({ ...formData, type: \"Income\" });\n      } else if (\n        segment.isFinal &&\n        segment.intent.intent === \"create_transaction\"\n      ) {\n        return createTransaction();\n      } else if (\n        segment.isFinal &&\n        segment.intent.intent === \"cancel_transaction\"\n      ) {\n        return setFormData(initialState);\n      }\n      segment.entities.forEach((e) => {\n        const category = `${e.value.charAt(0)}${e.value\n          .slice(1)\n          .toLowerCase()}`;\n        switch (e.type) {\n          case \"amount\":\n            setFormData({ ...formData, amount: e.value });\n            break;\n          case \"category\":\n            if (incomeCategories.map((ic) => ic.type).includes(category)) {\n              setFormData({ ...formData, type: \"Income\", category: category });\n            } else if (\n              expenseCategories.map((ic) => ic.type).includes(category)\n            ) {\n              setFormData({ ...formData, type: \"Expense\", category: category });\n            }\n\n            break;\n          case \"date\":\n            setFormData({ ...formData, date: e.value });\n            break;\n          default:\n            break;\n        }\n      });\n      if (\n        segment.isFinal &&\n        formData.amount &&\n        formData.category &&\n        formData.type &&\n        formData.date\n      ) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n\n  const selectedCategories =\n    formData.type === \"Income\" ? incomeCategories : expenseCategories;\n  return (\n    <Grid container spacing={2}>\n      <CustomSnackbar open={open} setOpen={setOpen} />\n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterbottom>\n          {segment && segment.words.map((word) => word.value).join(\" \")}\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select\n            value={formData.type}\n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n          >\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select\n            value={formData.category}\n            onChange={(e) =>\n              setFormData({ ...formData, category: e.target.value })\n            }\n          >\n            {selectedCategories.map((c) => (\n              <MenuItem key={c.type} value={c.type}>\n                {c.type}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          type=\"number\"\n          label=\"Amount\"\n          fullWidth\n          value={formData.amount}\n          onChange={(e) =>\n            setFormData({ ...formData, amount: Number(e.target.value) })\n          }\n        />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField\n          type=\"date\"\n          label=\"Date\"\n          fullWidth\n          value={formData.date}\n          onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n        />\n      </Grid>\n      <Button\n        className={classes.button}\n        variant=\"outlined\"\n        color=\"primary\"\n        fullWidth\n        onClick={createTransaction}\n      >\n        Create\n      </Button>\n    </Grid>\n  );\n};\n\nexport default Form;\n","/Users/mattbrown/projects/slice/src/components/Main/List/styles.js",[],"/Users/mattbrown/projects/slice/src/components/Main/List/List.js",[],"/Users/mattbrown/projects/slice/src/context/context.js",[],"/Users/mattbrown/projects/slice/src/context/contextReducer.js",[],"/Users/mattbrown/projects/slice/src/components/Main/styles.js",[],["77","78"],"/Users/mattbrown/projects/slice/src/useTransactions.js",[],"/Users/mattbrown/projects/slice/src/utils/formatDate.js",[],"/Users/mattbrown/projects/slice/src/components/SnackBar/SnackBar.js",[],"/Users/mattbrown/projects/slice/src/components/infoCard.js",[],"/Users/mattbrown/projects/slice/src/components/Main/Form/styles.js",[],"/Users/mattbrown/projects/slice/src/styles.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":16,"column":10,"nodeType":"85","messageId":"86","endLine":16,"endColumn":30},{"ruleId":"87","severity":1,"message":"88","line":103,"column":6,"nodeType":"89","endLine":103,"endColumn":15,"suggestions":"90"},{"ruleId":"79","replacedBy":"91"},{"ruleId":"81","replacedBy":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'FormatIndentDecrease' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["95"],["93"],["94"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"98","text":"99"},[2950,2959],"[createTransaction, formData, segment]"]